[{"examId":100,"questionCount":100,"examQuestions":[{"topicId":1032,"topic":"Lambda Expressions and Functional Interfaces","questionId":103207,"difficulty":"medium","type":"single","question":"What is the result of executing the following code?\n\\begin{verbatim}\nimport java.util.function.Predicate;\n\npublic class CheckString {\n    public static void main(String[] args) {\n        Predicate<String> p = (s) -> s.isEmpty();\n        System.out.println(p.test(\"\"));\n    }\n}\n\\end{verbatim}","choices":{"0":"`true`","1":"`false`","2":"A `NullPointerException` is thrown.","3":"The code does not compile."},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1005,"topic":"Type Conversion and Casting","questionId":100507,"difficulty":"medium","type":"single","question":"What is the value of `i` after this code is executed?\n\\begin{verbatim}\ndouble d = 12.9;\nint i = (int)d;\n\\end{verbatim}","choices":{"0":"12","1":"13","2":"12.9","3":"The code does not compile."},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1018,"topic":"Garbage Collection and Object Lifecycle","questionId":101820,"difficulty":"medium","type":"single","question":"What happens if an exception is thrown from within a `finalize()` method?","choices":{"0":"The exception propagates to the `main` thread and terminates the application if not caught.","1":"The garbage collector catches the exception, ignores it, and halts finalization for that object.","2":"The object is not garbage collected.","3":"The JVM will shut down immediately.","4":"It causes a compilation error."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1028,"topic":"Exception Hierarchy and Types","questionId":102816,"difficulty":"medium","type":"single","question":"Which exception will be thrown by the following code?\n\\begin{verbatim}\npublic class Test {\n    public static void main(String[] args) {\n        String[] array = {\"a\", \"b\"};\n        System.out.println(array[getIdx()].length());\n    }\n    public static int getIdx() {\n        return 2;\n    }\n}\n\\end{verbatim}","choices":{"0":"`NullPointerException`","1":"`ArrayIndexOutOfBoundsException`","2":"`StringIndexOutOfBoundsException`","3":"No exception is thrown."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1006,"topic":"Wrapper Classes and Autoboxing/Unboxing","questionId":100619,"difficulty":"medium","type":"multiple","question":"Which of these lines of code will compile successfully? (Choose all that apply)","choices":{"0":"\\verb|Float f = 10.0;|","1":"\\verb|Character c = 65;|","2":"\\verb|double d = new Double(10.5);|","3":"\\verb|Boolean b = null;|","4":"\\verb|int i = new Integer(5);|"},"answers":["2","3","4"],"attempts":1,"attempted":true,"answered":false},{"topicId":1013,"topic":"String Immutability and Operations","questionId":101310,"difficulty":"medium","type":"single","question":"What is printed by the following code?\n\\begin{verbatim}\nString s = \" a b c \";\ns = s.trim();\ns = s.replace(\" \", \"\");\nSystem.out.println(s.length());\n\\end{verbatim}","choices":{"0":"3","1":"5","2":"7","3":"9"},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1025,"topic":"ArrayList and Basic Collections","questionId":102516,"difficulty":"medium","type":"multiple","question":"Given the following list, which of the options will result in the list `[X, Z]`? (Choose all that apply)\\begin{verbatim}\nList<String> list = new ArrayList<>();\nlist.add(\"X\");\nlist.add(\"Y\");\nlist.add(\"Z\");\n\\end{verbatim}","choices":{"0":"\\verb|list.remove(1);|","1":"\\verb|list.remove(\"Y\");|","2":"\\verb|list.remove(new String(\"Y\"));|","3":"\\verb|list.set(1, \"Z\"); list.remove(2);|"},"answers":["0","1","2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1022,"topic":"Abstract Classes and Interfaces","questionId":102208,"difficulty":"medium","type":"single","question":"What is the result of attempting to compile this code?\\n\\begin{verbatim}\npublic abstract class Shape {\n    private abstract void draw();\n}\n\\end{verbatim}","choices":{"0":"It compiles successfully.","1":"It fails to compile because an abstract method cannot be `private`.","2":"It fails to compile because the class is abstract but has no concrete methods.","3":"It fails to compile because `draw()` has no method body."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1004,"topic":"Primitive Data Types and Literals","questionId":100416,"difficulty":"medium","type":"multiple","question":"Which of the following character literals are valid in Java? (Choose all that apply)","choices":{"0":"`'\\u0041'`","1":"`'\\n'`","2":"`'ab'`","3":"`'\"'`"},"answers":["0","1","3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1034,"topic":"Static Imports","questionId":103434,"difficulty":"medium","type":"multiple","question":"Consider the following code. Which of the import statements, if inserted at line 1, will allow the code to compile? (Choose all that apply)\n\\begin{verbatim}\n// line 1: INSERT IMPORT HERE\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> data = asList(\"x\", \"y\");\n        out.println(data);\n    }\n}\n\\end{verbatim}","choices":{"0":"`import java.util.*;\nimport static java.lang.System.*;`","1":"`import java.util.List;\nimport static java.util.Arrays.asList;\nimport static java.lang.System.out;`","2":"`import static java.util.Arrays.*;\nimport static java.lang.System.out;\nimport java.util.List;`","3":"`import static java.util.Arrays.asList;\nimport static java.lang.System.*;`"},"answers":["1","2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1026,"topic":"Generics","questionId":102617,"difficulty":"medium","type":"multiple","question":"Which of the following statements are true about raw types in Java? (Choose all that apply)","choices":{"0":"Using raw types is completely forbidden in Java 8.","1":"Using raw types bypasses compile-time generic type checking.","2":"The compiler issues a warning when raw types are used.","3":"Raw types are necessary for backward compatibility with pre-Java 5 code.","4":"A `List` is equivalent to a `List<Object>`."},"answers":["1","2","3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1029,"topic":"Try-Catch-Finally Blocks","questionId":102907,"difficulty":"medium","type":"single","question":"What is the output of this code?\n\\begin{verbatim}\npublic class Test {\n    public static void main(String[] args) {\n        System.out.print(getValue());\n    }\n    public static int getValue() {\n        try {\n            return 10;\n        } finally {\n            System.out.print(\"Finally \");\n        }\n    }\n}\n\\end{verbatim}","choices":{"0":"`10 Finally`","1":"`Finally 10`","2":"`10`","3":"`Finally`"},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1021,"topic":"Polymorphism and Type Casting","questionId":102115,"difficulty":"medium","type":"single","question":"What is the result of executing the following code?\\n\\begin{verbatim}\ninterface Readable {}\nclass Book implements Readable {}\nclass EBook extends Book {\n    public void read() { System.out.println(\"Reading EBook\"); }\n}\npublic class Test {\n    public static void main(String[] args) {\n        Readable r = new EBook();\n        if (r instanceof EBook) {\n            ((EBook) r).read();\n        }\n    }\n}\n\\end{verbatim}","choices":{"0":"Reading EBook","1":"The code fails to compile because `r` does not have a `read()` method.","2":"The code fails to compile because an interface reference cannot be cast to a class.","3":"A `ClassCastException` is thrown at runtime."},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1015,"topic":"Classes and Objects Fundamentals","questionId":101506,"difficulty":"medium","type":"single","question":"What is the result of compiling and running the following code?\\n\\begin{verbatim}\\npublic class Test {\\n    public static void main(String[] args) {\\n        Test t;\\n        t.go();\\n    }\\n\\n    void go() {\\n        System.out.println(\"Going!\");\\n    }\\n}\\n\\end{verbatim}","choices":{"0":"Going!","1":"The code compiles but throws a `NullPointerException` at runtime.","2":"The code fails to compile because `t` is not initialized.","3":"The code compiles but throws an `IllegalStateException` at runtime."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1011,"topic":"Break, Continue, and Labels","questionId":101109,"difficulty":"medium","type":"single","question":"What is the result of executing this code snippet?\\n\\begin{verbatim}\nint i = 0;\nwhile (i < 10) {\n    if (i == 5) {\n        continue;\n    }\n    System.out.print(i);\n    i++;\n}\n\\end{verbatim}","choices":{"0":"012346789","1":"01234","2":"An infinite loop occurs.","3":"A compilation error occurs."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1014,"topic":"StringBuilder and StringBuffer","questionId":101412,"difficulty":"medium","type":"single","question":"What is the result of executing this code snippet?\n\\begin{verbatim}\nStringBuilder sb = new StringBuilder(\"Test\");\nString s = \"Test\";\nSystem.out.println(s.equals(sb.toString()) + \" \" + sb.toString().equals(s));\n\\end{verbatim}","choices":{"0":"`true true`","1":"`true false`","2":"`false true`","3":"`false false`"},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1027,"topic":"Sorting and Searching Collections (Comparable, Comparator)","questionId":102719,"difficulty":"medium","type":"single","question":"Which of these expressions will cause a compilation error?\n\\begin{verbatim}\nclass Animal { int age; public int getAge() { return age; } }\nclass Dog extends Animal {}\nList<Dog> dogs = new ArrayList<>();\n\\end{verbatim}","choices":{"0":"`Comparator<Animal> c1 = (a1, a2) -> a1.getAge() - a2.getAge(); dogs.sort(c1);`","1":"`Comparator<Dog> c2 = (d1, d2) -> d1.getAge() - d2.getAge(); dogs.sort(c2);`","2":"`Comparator<Object> c3 = (o1, o2) -> 1; dogs.sort(c3);`","3":"`Comparator<String> c4 = (s1, s2) -> s1.length() - s2.length(); dogs.sort(c4);`"},"answers":["3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1017,"topic":"Static Members and 'this' Keyword","questionId":101710,"difficulty":"medium","type":"single","question":"What is the output of the following code?\\n\\begin{verbatim}\\nimport static java.lang.Integer.MAX_VALUE;\\n\\npublic class StaticImportTest {\\n    public static void main(String[] args) {\\n        System.out.println(MAX_VALUE);\\n    }\\n}\\n\\end{verbatim}","choices":{"0":"MAX_VALUE","1":"2147483647","2":"The code does not compile because of the import statement.","3":"The code does not compile because `MAX_VALUE` is ambiguous."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1036,"topic":"Passing Data Among Methods","questionId":103633,"difficulty":"medium","type":"multiple","question":"What are the final values of `x`, `y.value`, and `z` at the end of the `main` method? (Choose all that apply)\n\\begin{verbatim}\nclass Wrapper { public int value; }\n\npublic class FinalValues {\n    public static void main(String[] args) {\n        int x = 10;\n        Wrapper y = new Wrapper(); y.value = 20;\n        String z = \"30\";\n        modify(x, y, z);\n        // What are the values here?\n    }\n    public static void modify(int x, Wrapper y, String z) {\n        x = 15;\n        y.value = 25;\n        z = \"35\";\n    }\n}\n\\end{verbatim}","choices":{"0":"`x` is 10","1":"`y.value` is 20","2":"`y.value` is 25","3":"`z` is \"30\"","4":"`z` is \"35\""},"answers":["0","2","3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1000,"topic":"Java Environment and Fundamentals","questionId":100014,"difficulty":"medium","type":"single","question":"A Java source file contains two classes, \\verb|A| and \\verb|B|. Class \\verb|A| is public. What must the name of the source file be?","choices":{"0":"\\verb|A.java|","1":"\\verb|B.java|","2":"It can be named anything.","3":"\\verb|AB.java|"},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1009,"topic":"Conditional Statements (if/else, switch)","questionId":100915,"difficulty":"medium","type":"single","question":"Consider the following code snippet. What is the output?\\n\\begin{verbatim}\nint x = 1;\nif (x > 5) {\n    System.out.println(\"A\");\n}\nelse {\n    System.out.println(\"B\");\n} else {\n    System.out.println(\"C\");\n}\n\\end{verbatim}","choices":{"0":"A","1":"B","2":"C","3":"Compilation fails."},"answers":["3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1012,"topic":"Enums","questionId":101212,"difficulty":"medium","type":"single","question":"Which of the following classes is the direct superclass for all enums in Java?","choices":{"0":"`java.lang.Object`","1":"`java.lang.Enum`","2":"`java.lang.Serializable`","3":"`java.lang.Comparable`"},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1002,"topic":"Packages, Classpath, and JARs","questionId":100217,"difficulty":"medium","type":"multiple","question":"Which of the following statements about the Java classpath are true? (Choose all that apply)","choices":{"0":"The classpath tells the JVM where to find user-defined classes.","1":"The order of entries in the classpath matters.","2":"The classpath can include directories and JAR files.","3":"If the classpath is not set, the JVM only searches the `java.lang` package.","4":"The `-cp` and `-classpath` flags are interchangeable."},"answers":["0","1","2","4"],"attempts":1,"attempted":true,"answered":false},{"topicId":1007,"topic":"Variable Scope and Lifetime","questionId":100712,"difficulty":"medium","type":"single","question":"What is the result of the following code snippet?\\n\\begin{verbatim}\npublic class Scope {\n    public static void main(String[] args) {\n        int a = 10;\n        {\n            int b = 20;\n            System.out.print(a);\n        }\n        System.out.print(b);\n    }\n}\n\\end{verbatim}","choices":{"0":"The code prints 1020.","1":"The code prints 10.","2":"The code does not compile.","3":"The code prints 2010."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1003,"topic":"Java Coding Conventions and Javadoc","questionId":100318,"difficulty":"medium","type":"multiple","question":"Which Javadoc tags would be appropriate for documenting the following method? (Choose all that apply)\n\\begin{verbatim}\npublic List<String> processFile(String filename) throws java.io.IOException\n\\end{verbatim}","choices":{"0":"`@param`","1":"`@return`","2":"`@throws`","3":"`@see`","4":"`@void`"},"answers":["0","1","2","3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1031,"topic":"Try-with-Resources","questionId":103118,"difficulty":"medium","type":"multiple","question":"Which of the following interfaces directly extend `java.lang.AutoCloseable`? (Choose all that apply)","choices":{"0":"`java.io.Closeable`","1":"`java.util.stream.Stream`","2":"`java.sql.Connection`","3":"`java.util.Scanner`"},"answers":["0","1","2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1035,"topic":"Method Design and Variable Arguments","questionId":103532,"difficulty":"medium","type":"multiple","question":"Given the method `public void print(int... nums)`, which of the following calls are valid? (Choose all that apply)","choices":{"0":"`print(1, 2, 3);`","1":"`print();`","2":"`print(new int[]{4, 5, 6});`","3":"`print(null);`","4":"`print(7);`"},"answers":["0","1","2","4"],"attempts":1,"attempted":true,"answered":false},{"topicId":1033,"topic":"Date and Time API (java.time)","questionId":103329,"difficulty":"medium","type":"single","question":"What is the output of the following code involving `Duration` and nanoseconds?\n\\begin{verbatim}\nimport java.time.Duration;\nimport java.time.LocalDateTime;\n\npublic class DurationTest {\n    public static void main(String[] args) {\n        LocalDateTime dt1 = LocalDateTime.of(2025, 8, 2, 10, 0, 0);\n        LocalDateTime dt2 = LocalDateTime.of(2025, 8, 2, 10, 0, 30, 500000000);\n        Duration duration = Duration.between(dt1, dt2);\n        System.out.println(duration);\n    }\n}\n\\end{verbatim}","choices":{"0":"`PT30S`","1":"`PT31S`","2":"`PT30.5S`","3":"`P30.5S`"},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1010,"topic":"Looping Constructs (for, while, do-while)","questionId":101011,"difficulty":"medium","type":"single","question":"Which statement about this code is true?\\n\\begin{verbatim}\nwhile(true) {\n    System.out.println(\"Inside\");\n    break;\n    System.out.println(\"After break\");\n}\n\\end{verbatim}","choices":{"0":"It prints `Inside` once.","1":"It prints `Inside` infinitely.","2":"It fails to compile.","3":"It prints `Inside` and then `After break` once."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1030,"topic":"Throwing and Creating Exceptions","questionId":103014,"difficulty":"medium","type":"single","question":"What is the outcome of running this `main` method?\n\\begin{verbatim}\npublic class TestCatch {\n    public static void main(String[] args) {\n        try {\n            System.out.print(\"T\");\n            throw new NullPointerException();\n        } catch (IllegalArgumentException e) {\n            System.out.print(\"C\");\n        } finally {\n            System.out.print(\"F\");\n        }\n        System.out.print(\"E\");\n    }\n}\n\\end{verbatim}","choices":{"0":"`TFE`","1":"`TCFE`","2":"`TF` followed by a `NullPointerException`.","3":"`T` followed by a `NullPointerException`.","4":"The code will not compile."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1001,"topic":"Main Method and Command Line Arguments","questionId":100109,"difficulty":"medium","type":"single","question":"Consider the following class:\n\\begin{verbatim}\npublic class NoMain {\n    public void main(String[] args) {\n        System.out.println(\"Hello\");\n    }\n}\n\\end{verbatim}\nWhat happens when you try to execute this class using `java NoMain`?","choices":{"0":"It compiles and runs, printing \"Hello\".","1":"It fails to compile.","2":"It compiles but throws a runtime error indicating the `main` method is not static.","3":"It compiles but prints nothing."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1023,"topic":"The 'final' Keyword","questionId":102314,"difficulty":"medium","type":"single","question":"Given a final variable declared as `final int[] nums = {10, 20, 30};`, which of the following operations is illegal?","choices":{"0":"`nums[0] = 5;`","1":"`System.out.println(nums[1]);`","2":"`nums = new int[]{40, 50};`","3":"`int len = nums.length;`"},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1024,"topic":"One-Dimensional and Multi-Dimensional Arrays","questionId":102406,"difficulty":"medium","type":"single","question":"What is the result of executing the following code?\\begin{verbatim}\nint[] a = new int[3];\nint[] b = {1, 2, 3, 4, 5};\na = b;\nSystem.out.println(a[3]);\n\\end{verbatim}","choices":{"0":"0","1":"3","2":"4","3":"An \\verb|ArrayIndexOutOfBoundsException| is thrown."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1016,"topic":"Constructors and Initialization Blocks","questionId":101607,"difficulty":"medium","type":"single","question":"What is the output of the following code?\\n\\begin{verbatim}\\npublic class OrderOfInit {\\n    static { System.out.print(\"S\"); }\\n\\n    public OrderOfInit() {\\n        System.out.print(\"C\");\\n    }\\n\\n    { System.out.print(\"I\"); }\\n\\n    public static void main(String[] args) {\\n        new OrderOfInit();\\n        new OrderOfInit();\\n    }\\n}\\n\\end{verbatim}","choices":{"0":"SIC SIC","1":"S IC IC","2":"S C I S C I","3":"IC IC S"},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1008,"topic":"Java Operators and Precedence","questionId":100806,"difficulty":"medium","type":"single","question":"What values are printed by this code?\\n\\begin{verbatim}\nint x = 5;\nint y = ++x;\nint z = x++;\nSystem.out.println(y + \", \" + z);\n\\end{verbatim}","choices":{"0":"6, 7","1":"5, 6","2":"6, 5","3":"6, 6"},"answers":["3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1020,"topic":"Inheritance and Method Overriding","questionId":102014,"difficulty":"medium","type":"single","question":"What is the result of compiling and running this code?\n\\begin{verbatim}\nclass Vehicle {\n    private void drive() {\n        System.out.println(\"Driving vehicle\");\n    }\n    public static void main(String[] args) {\n        Vehicle v = new Car();\n        v.drive();\n    }\n}\nclass Car extends Vehicle {\n    protected void drive() {\n        System.out.println(\"Driving car\");\n    }\n}\n\\end{verbatim}","choices":{"0":"Driving vehicle","1":"Driving car","2":"Compilation fails because the `drive` method in `Car` is not a valid override.","3":"Compilation fails because `v.drive()` cannot access the private method.","4":"A runtime error occurs."},"answers":["3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1019,"topic":"Encapsulation and Access Modifiers","questionId":101912,"difficulty":"medium","type":"single","question":"Given two packages, `p1` and `p2`:\n\\begin{verbatim}\n// In package p1\npackage p1;\npublic class A {\n    protected int value = 42;\n}\n\n// In package p2\npackage p2;\nimport p1.A;\npublic class B {\n    public void test() {\n        A a = new A();\n        System.out.println(a.value); // Line X\n    }\n}\n\\end{verbatim}\nWhat is the result of attempting to compile these classes?","choices":{"0":"Compilation succeeds, and it would print 42 if `test()` were called.","1":"Compilation fails at Line X.","2":"Compilation succeeds, but a runtime exception occurs at Line X.","3":"Compilation fails because class B cannot import class A."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1031,"topic":"Try-with-Resources","questionId":103113,"difficulty":"medium","type":"single","question":"What happens if resource initialization throws an exception?\n\\begin{verbatim}\nclass BadResource implements AutoCloseable {\n    public BadResource() throws Exception {\n        throw new Exception(\"Init Fail\");\n    }\n    public void close() { /* does nothing */ }\n}\npublic class TestInitFail {\n    public static void main(String[] args) {\n        try (BadResource br = new BadResource()) {\n            System.out.println(\"In Try\");\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n\\end{verbatim}","choices":{"0":"`Init Fail`","1":"`In Try` followed by `Init Fail`","2":"A `NullPointerException` is thrown.","3":"The code fails to compile."},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1022,"topic":"Abstract Classes and Interfaces","questionId":102215,"difficulty":"medium","type":"single","question":"What is the result of this code?\\n\\begin{verbatim}\nclass SuperCalculator {\n    public void calculate() {\n        System.out.println(\"Super\");\n    }\n}\ninterface Calculable {\n    void calculate();\n}\nclass PowerCalculator extends SuperCalculator implements Calculable {\n}\npublic class Test {\n    public static void main(String[] args) {\n        new PowerCalculator().calculate();\n    }\n}\n\\end{verbatim}","choices":{"0":"The code fails to compile because `PowerCalculator` doesn't explicitly implement `calculate`.","1":"The code compiles and prints \"Super\".","2":"The code fails to compile because of a conflict between the superclass and interface method.","3":"The code compiles but results in a runtime error."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1010,"topic":"Looping Constructs (for, while, do-while)","questionId":101009,"difficulty":"medium","type":"single","question":"What is the result of the following code snippet?\\n\\begin{verbatim}\nint i = 0;\nfor ( ; i < 2; i=i+5) {\n    if (i < 5)\n        continue;\n    i = i + 3;\n}\nSystem.out.println(i);\n\\end{verbatim}","choices":{"0":"0","1":"5","2":"8","3":"Compilation fails."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1027,"topic":"Sorting and Searching Collections (Comparable, Comparator)","questionId":102710,"difficulty":"medium","type":"single","question":"Given a `Player` class with `name` (String) and `score` (int) fields, which lambda expression correctly creates a `Comparator` to sort players by score in descending order?\n\\begin{verbatim}\nclass Player {\n    String name;\n    int score;\n    // constructor and getters\n}\n\\end{verbatim}","choices":{"0":"`Comparator<Player> c = (p1, p2) -> p1.getScore() - p2.getScore();`","1":"`Comparator<Player> c = (p1, p2) -> p2.getScore() - p1.getScore();`","2":"`Comparator<Player> c = (p1, p2) -> p1.name.compareTo(p2.name);`","3":"`Comparator<Player> c = (p1, p2) -> p2.score.compareTo(p1.score);`"},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1020,"topic":"Inheritance and Method Overriding","questionId":102013,"difficulty":"medium","type":"multiple","question":"Given the class `Game`:\n\\begin{verbatim}\nclass Game {\n    public void play() throws Exception {}\n}\n\\end{verbatim}\nWhich of the following are valid overrides of the `play()` method in a subclass? (Choose all that apply)","choices":{"0":"`public void play() {}`","1":"`public void play() throws java.io.IOException {}`","2":"`public void play() throws RuntimeException {}`","3":"`void play() throws Exception {}`","4":"`public void play() throws Throwable {}`"},"answers":["0","1","2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1009,"topic":"Conditional Statements (if/else, switch)","questionId":100919,"difficulty":"medium","type":"multiple","question":"Which of the following will compile successfully? (Choose all that apply)","choices":{"0":"\\begin{verbatim}int x = 1; if(x) {}\n\\end{verbatim}","1":"\\begin{verbatim}boolean b = true; if(b=false) {}\n\\end{verbatim}","2":"\\begin{verbatim}if(true) if(false) ; else System.out.println(\"a\");\n\\end{verbatim}","3":"\\begin{verbatim}byte b = 10; switch(b) { case 1000: break; }\n\\end{verbatim}"},"answers":["1","2","3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1021,"topic":"Polymorphism and Type Casting","questionId":102109,"difficulty":"medium","type":"single","question":"Given the following overloaded methods, which one will be called by `test.method(10);`?\\n\\begin{verbatim}\npublic class OverloadTest {\n    public void method(long l) {\n        System.out.println(\"long\");\n    }\n    public void method(Integer i) {\n        System.out.println(\"Integer\");\n    }\n    \n    public static void main(String[] args) {\n        OverloadTest test = new OverloadTest();\n        test.method(10);\n    }\n}\n\\end{verbatim}","choices":{"0":"The method with the `long` parameter.","1":"The method with the `Integer` parameter.","2":"The code fails to compile due to ambiguity.","3":"Neither method is called; a runtime error occurs."},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1025,"topic":"ArrayList and Basic Collections","questionId":102510,"difficulty":"medium","type":"single","question":"Which statement correctly replaces the element at index 1 with \"Z\"?\\begin{verbatim}\nList<String> list = new ArrayList<>();\nlist.add(\"X\");\nlist.add(\"Y\");\n// INSERT CODE HERE\n\\end{verbatim}","choices":{"0":"\\verb|list.add(1, \"Z\");|","1":"\\verb|list.set(1, \"Z\");|","2":"\\verb|list.replace(1, \"Z\");|","3":"\\verb|list[1] = \"Z\";|"},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1032,"topic":"Lambda Expressions and Functional Interfaces","questionId":103211,"difficulty":"medium","type":"single","question":"What is the output of this code?\n\\begin{verbatim}\nimport java.util.function.UnaryOperator;\n\npublic class OperatorTest {\n    public static void main(String[] args) {\n        UnaryOperator<Integer> square = (x) -> x * x;\n        System.out.println(square.apply(5));\n    }\n}\n\\end{verbatim}","choices":{"0":"`5`","1":"`10`","2":"`25`","3":"The code does not compile."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1034,"topic":"Static Imports","questionId":103423,"difficulty":"medium","type":"single","question":"What is the result of attempting to compile and run the following code?\n\\begin{verbatim}\n// File: com/app/Logger.java\npackage com.app;\npublic class Logger {\n    private static void log(String msg) {\n        System.out.println(msg);\n    }\n}\n\n// File: com/test/Test.java\npackage com.test;\nimport static com.app.Logger.log;\n\npublic class Test {\n    public static void main(String[] args) {\n        log(\"Hello\");\n    }\n}\n\\end{verbatim}","choices":{"0":"It prints `Hello`.","1":"It fails to compile because `log` is private.","2":"It compiles but throws an `IllegalAccessException` at runtime.","3":"It prints nothing."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1000,"topic":"Java Environment and Fundamentals","questionId":100020,"difficulty":"medium","type":"multiple","question":"Select all true statements about the Java execution process. (Choose all that apply)","choices":{"0":"The `java` command starts the Java Runtime Environment.","1":"Bytecode is a low-level language that is understood directly by the CPU.","2":"The JVM interprets bytecode.","3":"An object's `main` method is called to start the program."},"answers":["0","2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1026,"topic":"Generics","questionId":102608,"difficulty":"medium","type":"single","question":"What is the problem with the following code?\\begin{verbatim}\npublic class Box<T> {\n    private T contents;\n    public static T getEmptyContents() { // Line 3\n        return null;\n    }\n}\n\\end{verbatim}","choices":{"0":"A static method cannot return `null`.","1":"The method must be named `getContents` to match the field.","2":"A static method cannot refer to the class's type parameter `T`.","3":"There is no problem; the code is valid."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1019,"topic":"Encapsulation and Access Modifiers","questionId":101916,"difficulty":"medium","type":"single","question":"Given the following code in two separate files:\n\\begin{verbatim}\n// File: pkg1/Base.java\npackage pkg1;\npublic class Base {\n    public void method() {\n        System.out.println(\"Base\");\n    }\n}\n\n// File: pkg2/Derived.java\npackage pkg2;\nimport pkg1.Base;\npublic class Derived extends Base {\n    private void method() {\n        System.out.println(\"Derived\");\n    }\n    public static void main(String[] args) {\n        Base b = new Derived();\n        b.method();\n    }\n}\n\\end{verbatim}\nWhat is the result?","choices":{"0":"Base","1":"Derived","2":"Compilation fails because the overriding method is more restrictive.","3":"Compilation fails because `method()` in `Derived` is not an override.","4":"A runtime error occurs."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1016,"topic":"Constructors and Initialization Blocks","questionId":101618,"difficulty":"medium","type":"multiple","question":"Which of the following code snippets will result in a compilation error? (Choose all that apply)","choices":{"0":"``class A { A() { super(); this(); } }``","1":"``class B { B() { } B(int i) { } }``","2":"``class C { final int x; { x = 10; } }``","3":"``class D { D() { return; } }``","4":"``class E { void E() {} }``"},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1005,"topic":"Type Conversion and Casting","questionId":100520,"difficulty":"medium","type":"single","question":"Examine this code:\n\\begin{verbatim}\nbyte b = 10;\nchar c = b;\n\\end{verbatim}\nWhat is the result?","choices":{"0":"It compiles, and `c` holds the character with value 10.","1":"It fails to compile because a `byte` cannot be assigned to a `char` without a cast.","2":"It compiles, but throws a runtime exception.","3":"It fails to compile because `b` is negative."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1006,"topic":"Wrapper Classes and Autoboxing/Unboxing","questionId":100607,"difficulty":"medium","type":"single","question":"What happens when the following code is executed?\\n\\begin{verbatim}\npublic class Test {\n    public static void main(String[] args) {\n        Integer number = null;\n        int result = number;\n        System.out.println(result);\n    }\n}\n\\end{verbatim}","choices":{"0":"The code prints \\verb|0|.","1":"The code prints \\verb|null|.","2":"The code throws a \\verb|NullPointerException|.","3":"The code fails to compile."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1002,"topic":"Packages, Classpath, and JARs","questionId":100211,"difficulty":"medium","type":"single","question":"What is the purpose of the `Main-Class` attribute in a JAR file's manifest?","choices":{"0":"To specify the version of the main class.","1":"To allow the JAR to be executed using the `java -jar` command by specifying the entry point class.","2":"To list all the classes in the JAR file.","3":"To set the classpath for the classes inside the JAR."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1029,"topic":"Try-Catch-Finally Blocks","questionId":102909,"difficulty":"medium","type":"single","question":"What is the result of attempting to compile this method?\n\\begin{verbatim}\nimport java.io.IOException;\npublic void processFile() {\n    try {\n        throw new IOException();\n    } finally {\n        System.out.println(\"Closing file\");\n    }\n}\n\\end{verbatim}","choices":{"0":"Compilation succeeds, but the method must be called from within a `try-catch` block.","1":"Compilation succeeds, and the exception is silently ignored.","2":"Compilation fails because the checked `IOException` is not handled or declared.","3":"Compilation fails because a `try` with only a `finally` block cannot throw an exception."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1023,"topic":"The 'final' Keyword","questionId":102306,"difficulty":"medium","type":"single","question":"What is the output of the following code?\\n\\begin{verbatim}\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FinalTest {\n    public static void main(String[] args) {\n        final List<String> list = new ArrayList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.remove(0);\n        System.out.println(list.get(0));\n    }\n}\n\\end{verbatim}","choices":{"0":"A","1":"B","2":"The code fails to compile because a `final` list cannot be modified.","3":"A runtime exception is thrown."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1012,"topic":"Enums","questionId":101218,"difficulty":"medium","type":"single","question":"Which of the following is a valid way to get the `Class` object for an enum type `Size`?","choices":{"0":"`Size.class`","1":"`Size.type`","2":"`Size.getClass()`","3":"`Size.CLASS`"},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1014,"topic":"StringBuilder and StringBuffer","questionId":101414,"difficulty":"medium","type":"single","question":"Which statement will cause a `StringIndexOutOfBoundsException`?\n\\begin{verbatim}\nStringBuilder sb = new StringBuilder(\"java\");\n// Line 1\nsb.insert(4, \"8\");\n// Line 2\nsb.delete(2, 5);\n// Line 3\nsb.deleteCharAt(4);\n// Line 4\nsb.charAt(4);\n\\end{verbatim}","choices":{"0":"Line 1","1":"Line 2","2":"Line 3","3":"Line 4"},"answers":["3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1035,"topic":"Method Design and Variable Arguments","questionId":103533,"difficulty":"medium","type":"multiple","question":"Which statements are true about method design in Java? (Choose all that apply)","choices":{"0":"A method's return type is part of its signature for overloading.","1":"A method can be overloaded by changing only the names of its parameters.","2":"A `final` method cannot be overridden in a subclass.","3":"An `abstract` method cannot be `private`.","4":"A method parameter can be declared as `final`."},"answers":["2","3","4"],"attempts":1,"attempted":true,"answered":false},{"topicId":1036,"topic":"Passing Data Among Methods","questionId":103625,"difficulty":"medium","type":"single","question":"What is the output of the code below?\n\\begin{verbatim}\npublic class ReturnValueTest {\n    public static int transform(int x) {\n        x = x * 2;\n        return x;\n    }\n\n    public static void main(String[] args) {\n        int val = 5;\n        transform(val);\n        System.out.println(val);\n    }\n}\n\\end{verbatim}","choices":{"0":"`5`","1":"`10`","2":"The code fails to compile.","3":"The output is unpredictable."},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1008,"topic":"Java Operators and Precedence","questionId":100819,"difficulty":"medium","type":"multiple","question":"Which of these operators have the highest precedence? (Choose all that apply from the list)","choices":{"0":"() (parentheses)","1":"++ (postfix)","2":"++ (prefix)","3":"* (multiplication)"},"answers":["0","1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1015,"topic":"Classes and Objects Fundamentals","questionId":101513,"difficulty":"medium","type":"single","question":"What is the result of attempting to compile the following code in two separate files, `Key.java` and `Lock.java`?\\n\\begin{verbatim}\\n// In Key.java\\npackage com.safe;\\npublic class Key {\\n    private Key() {}\\n}\\n\\n// In Lock.java\\npackage com.safe;\\npublic class Lock {\\n    public void open() {\\n        Key k = new Key();\\n    }\\n}\\n\\end{verbatim}","choices":{"0":"Both files compile successfully.","1":"`Lock.java` fails to compile because it cannot access the private constructor of `Key`.","2":"`Key.java` fails to compile because a class cannot have only a private constructor.","3":"Both files compile, but a runtime error occurs when `open()` is called."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1011,"topic":"Break, Continue, and Labels","questionId":101107,"difficulty":"medium","type":"single","question":"What is the output of the following code?\\n\\begin{verbatim}\npublic class LabeledContinueTest {\n    public static void main(String[] args) {\n        outer:\n        for (int i = 1; i <= 2; i++) {\n            for (int j = 1; j <= 2; j++) {\n                if (j == 2) {\n                    continue outer;\n                }\n                System.out.print(\"i=\" + i + \", j=\" + j + \"; \");\n            }\n        }\n    }\n}\n\\end{verbatim}","choices":{"0":"i=1, j=1; i=1, j=2; i=2, j=1; i=2, j=2; ","1":"i=1, j=1; i=2, j=1; ","2":"i=1, j=1; i=2, j=1; i=2, j=2; ","3":"i=1, j=1; "},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1033,"topic":"Date and Time API (java.time)","questionId":103324,"difficulty":"medium","type":"single","question":"What is the result of executing the following code? Pay close attention to the year.\n\\begin{verbatim}\nimport java.time.LocalDate;\n\n// ...\nLocalDate.of(2025, 2, 29);\n\\end{verbatim}","choices":{"0":"It creates a `LocalDate` for `2025-02-28`.","1":"It creates a `LocalDate` for `2025-03-01`.","2":"The code fails to compile.","3":"It throws a `DateTimeException` at runtime."},"answers":["3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1003,"topic":"Java Coding Conventions and Javadoc","questionId":100320,"difficulty":"medium","type":"single","question":"Consider the Javadoc tag `@see`. What is its primary purpose?","choices":{"0":"To specify the author of the class or method.","1":"To generate a hyperlink to other related documentation.","2":"To describe an unchecked exception that might be thrown.","3":"To mark a method as serializable."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1018,"topic":"Garbage Collection and Object Lifecycle","questionId":101810,"difficulty":"medium","type":"multiple","question":"Which of the following statements about `System.gc()` are true? (Choose all that apply)","choices":{"0":"It is a request to the JVM to run the garbage collector.","1":"It guarantees that the garbage collector will run.","2":"It guarantees that all unreachable objects will be collected.","3":"It is equivalent to calling `Runtime.getRuntime().gc()`.","4":"It forces finalization of all objects pending finalization."},"answers":["0","3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1001,"topic":"Main Method and Command Line Arguments","questionId":100114,"difficulty":"medium","type":"single","question":"What is the output of this program if run with `java Main`?\n\\begin{verbatim}\npublic class Main {\n    public static void main(String[] args) {\n        if (args.length == 0) {\n            System.out.println(\"No arguments\");\n        } else {\n            System.out.println(args.length + \" arguments\");\n        }\n    }\n}\n\\end{verbatim}","choices":{"0":"0 arguments","1":"No arguments","2":"A `NullPointerException` is thrown.","3":"The code does not compile."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1017,"topic":"Static Members and 'this' Keyword","questionId":101707,"difficulty":"medium","type":"single","question":"What is the result of trying to compile this class?\\n\\begin{verbatim}\\npublic class Validator {\\n    private boolean valid;\\n\\n    public static void validate() {\\n        this.valid = true;\\n    }\\n}\\n\\end{verbatim}","choices":{"0":"Compilation is successful.","1":"Compilation fails because `this` cannot be used in a static context.","2":"Compilation fails because the `valid` field cannot be accessed from `validate()`.","3":"Compilation fails because a static method cannot have a `void` return type."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1030,"topic":"Throwing and Creating Exceptions","questionId":103013,"difficulty":"medium","type":"single","question":"Which definition creates a custom unchecked exception?","choices":{"0":"`public class MyUnchecked extends Exception { }`","1":"`public class MyUnchecked extends Throwable { }`","2":"`public class MyUnchecked extends Error { }`","3":"`public class MyUnchecked extends RuntimeException { }`"},"answers":["3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1004,"topic":"Primitive Data Types and Literals","questionId":100407,"difficulty":"medium","type":"single","question":"Which of the following lines of code will fail to compile?","choices":{"0":"`int i = 0b101;`","1":"`double d = 3.14_15;`","2":"`float f = 1.2e3f;`","3":"`long l = 100_L;`"},"answers":["3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1028,"topic":"Exception Hierarchy and Types","questionId":102809,"difficulty":"medium","type":"single","question":"What is the output of the following code snippet?\n\\begin{verbatim}\npublic class Test {\n    public static void main(String[] args) {\n        try {\n            Object[] arr = new String[2];\n            arr[0] = \"Hello\";\n            arr[1] = 100; // Line 5\n            System.out.println(\"End of try\");\n        } catch (Exception e) {\n            System.out.println(e.getClass().getSimpleName());\n        }\n    }\n}\n\\end{verbatim}","choices":{"0":"`NumberFormatException`","1":"`IllegalArgumentException`","2":"`ArrayStoreException`","3":"`ClassCastException`"},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1007,"topic":"Variable Scope and Lifetime","questionId":100714,"difficulty":"medium","type":"single","question":"What will be printed by the following code?\\n\\begin{verbatim}\npublic class Test {\n    public static void main(String[] args) {\n        int x;\n        // line 1\n        if (args.length > 0) {\n            x = 5;\n        } \n        // line 2\n        // System.out.println(x);\n    }\n}\n\\end{verbatim}","choices":{"0":"If line 2 is uncommented, the code will compile and print 0 if no arguments are passed.","1":"If line 2 is uncommented, the code will compile and print 5 if at least one argument is passed.","2":"If line 2 is uncommented, the code will fail to compile regardless of arguments passed.","3":"If line 1 is changed to \\verb|int x=0;|, the uncommented code will compile."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1024,"topic":"One-Dimensional and Multi-Dimensional Arrays","questionId":102412,"difficulty":"medium","type":"single","question":"Which of these array declarations and initializations is NOT legal?","choices":{"0":"\\verb|int[] arr = new int[2];|","1":"\\verb|int[] arr = new int[] {1, 2};|","2":"\\verb|int[] arr = {1, 2};|","3":"\\verb|int[] arr = new int[2] {1, 2};|"},"answers":["3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1013,"topic":"String Immutability and Operations","questionId":101311,"difficulty":"medium","type":"single","question":"What is the output of this code snippet?\n\\begin{verbatim}\nString s1 = \"1\";\nString s2 = s1.concat(\"2\");\ns2.concat(\"3\");\nSystem.out.println(s2);\n\\end{verbatim}","choices":{"0":"`1`","1":"`12`","2":"`123`","3":"The code does not compile."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1021,"topic":"Polymorphism and Type Casting","questionId":102112,"difficulty":"medium","type":"single","question":"What is the outcome of compiling and running this code?\\n\\begin{verbatim}\ninterface Flyable {\n    void fly();\n}\nclass Bird implements Flyable {\n    public void fly() { System.out.println(\"Bird flying\"); }\n}\nclass Plane implements Flyable {\n    public void fly() { System.out.println(\"Plane flying\"); }\n}\npublic class Test {\n    public static void main(String[] args) {\n        Flyable flyer = new Plane();\n        flyer.fly();\n    }\n}\n\\end{verbatim}","choices":{"0":"Bird flying","1":"Plane flying","2":"A compile-time error occurs.","3":"A `ClassCastException` is thrown."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1006,"topic":"Wrapper Classes and Autoboxing/Unboxing","questionId":100611,"difficulty":"medium","type":"single","question":"Consider the following code. Which statement is true?\\n\\begin{verbatim}\npublic class Test {\n    public static void main(String[] args) {\n        Long l1 = 10L;\n        long l2 = 10;\n        Integer i1 = 10;\n\n        // Statement goes here\n    }\n}\n\\end{verbatim}","choices":{"0":"\\verb|if (l1 == i1)| will not compile.","1":"\\verb|if (l1.equals(i1))| will return \\verb|true|.","2":"\\verb|if (l1.equals(l2))| will not compile.","3":"\\verb|if (l1 == l2)| will evaluate to \\verb|true|."},"answers":["3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1015,"topic":"Classes and Objects Fundamentals","questionId":101520,"difficulty":"medium","type":"multiple","question":"What are the characteristics of a class that correctly follows the principle of encapsulation? (Choose all that apply)","choices":{"0":"All instance variables are declared `public` for easy access.","1":"Instance variables are declared `private`.","2":"Public accessor methods (getters) and mutator methods (setters) are provided to access and modify the private instance variables.","3":"The class cannot be instantiated.","4":"The internal state of the object is hidden from the outside.","5":"All methods are declared `static`."},"answers":["1","2","4"],"attempts":1,"attempted":true,"answered":false},{"topicId":1010,"topic":"Looping Constructs (for, while, do-while)","questionId":101010,"difficulty":"medium","type":"single","question":"What is printed by this nested loop?\\n\\begin{verbatim}\npublic class NestedLoop {\n    public static void main(String[] args) {\n        for (int i = 0; i < 2; i++) {\n            for (int j = 2; j > 0; j--) {\n                if (j == 1)\n                    break;\n                System.out.print(j);\n            }\n            System.out.print(i);\n        }\n    }\n}\n\\end{verbatim}","choices":{"0":"2021","1":"202","2":"21021","3":"210"},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1034,"topic":"Static Imports","questionId":103421,"difficulty":"medium","type":"single","question":"What is the result of attempting to compile and run the following code?\n\\begin{verbatim}\n// File: pkg/A.java\npackage pkg;\npublic class A { \n    public static void run() { System.out.println(\"A\"); } \n}\n\n// File: pkg/B.java\npackage pkg;\npublic class B { \n    public static void run() { System.out.println(\"B\"); } \n}\n\n// File: Main.java\nimport static pkg.A.*;\nimport static pkg.B.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        run();\n    }\n}\n\\end{verbatim}","choices":{"0":"It prints `A`.","1":"It prints `B`.","2":"It fails to compile due to an ambiguous call.","3":"It throws an exception at runtime."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1001,"topic":"Main Method and Command Line Arguments","questionId":100115,"difficulty":"medium","type":"single","question":"Consider this code:\n\\begin{verbatim}\npublic class Logic {\n    public static void main(String... logic) {\n        System.out.println(logic[1]);\n    }\n}\n\\end{verbatim}\nWhat is the result of running `java Logic true false`?","choices":{"0":"true","1":"false","2":"Compilation fails due to the parameter name `logic`.","3":"An `ArrayIndexOutOfBoundsException` is thrown."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1002,"topic":"Packages, Classpath, and JARs","questionId":100210,"difficulty":"medium","type":"single","question":"Given a source file with these two imports:\n\\begin{verbatim}\nimport java.util.Date;\nimport java.sql.Date;\n\\end{verbatim}\nWhat is the result?","choices":{"0":"A compilation error occurs due to the ambiguous `Date` class.","1":"`java.util.Date` takes precedence.","2":"`java.sql.Date` takes precedence.","3":"The code compiles, but a runtime error will occur if `Date` is used."},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1026,"topic":"Generics","questionId":102615,"difficulty":"medium","type":"single","question":"What happens when you try to use `instanceof` with a generic type?\\begin{verbatim}\npublic <T> void check(Object obj) {\n    if (obj instanceof T) { // Line 2\n        System.out.println(\"It's a T!\");\n    }\n}\n\\end{verbatim}","choices":{"0":"The code works as expected.","1":"The code compiles, but throws an exception at runtime.","2":"The code fails to compile at Line 2.","3":"The code compiles only if `T` is a final class."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1023,"topic":"The 'final' Keyword","questionId":102311,"difficulty":"medium","type":"single","question":"Which statement about the following code is true?\\n\\begin{verbatim}\nfinal class Algorithm {\n    public final void perform() {\n        // ...\n    }\n}\n\\end{verbatim}","choices":{"0":"The `final` keyword on the `perform` method is required for the code to compile.","1":"The `final` keyword on the `perform` method is redundant.","2":"The `final` keyword on the class `Algorithm` is redundant.","3":"This code will not compile."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1031,"topic":"Try-with-Resources","questionId":103115,"difficulty":"medium","type":"single","question":"What is the output of the code?\n\\begin{verbatim}\nclass Resource implements AutoCloseable {\n    public void close() { System.out.print(\"Close\"); }\n}\n\npublic class TryFinally {\n    public static void main(String[] args) {\n        try (Resource r = new Resource()) {\n            System.out.print(\"Try \");\n        } finally {\n            System.out.print(\"Finally\");\n        }\n    }\n}\n\\end{verbatim}","choices":{"0":"`Try FinallyClose`","1":"`Try CloseFinally`","2":"`FinallyTry Close`","3":"The code does not compile."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1016,"topic":"Constructors and Initialization Blocks","questionId":101617,"difficulty":"medium","type":"multiple","question":"Which of the following statements about static initializer blocks are true? (Choose all that apply)","choices":{"0":"They are executed only once, when the class is first loaded by the JVM.","1":"They can access `this` to refer to the current object.","2":"A class can have multiple static initializer blocks.","3":"They can access non-static instance variables of the class.","4":"They are guaranteed to execute before any instance of the class is created.","5":"They can throw checked exceptions without a `throws` clause."},"answers":["0","2","4"],"attempts":1,"attempted":true,"answered":false},{"topicId":1020,"topic":"Inheritance and Method Overriding","questionId":102018,"difficulty":"medium","type":"single","question":"Which statement best describes the difference between method overriding and method hiding?","choices":{"0":"Overriding applies to instance methods, while hiding applies to static methods. Method resolution for overriding is at runtime; for hiding, it's at compile-time.","1":"Overriding applies to static methods, while hiding applies to instance methods. Method resolution for overriding is at compile-time; for hiding, it's at runtime.","2":"Overriding involves changing the method signature, while hiding keeps it the same.","3":"There is no difference; they are two terms for the same concept."},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1019,"topic":"Encapsulation and Access Modifiers","questionId":101914,"difficulty":"medium","type":"single","question":"What is the output of the following code?\n\\begin{verbatim}\nclass Parent {\n    public String name = \"Parent\";\n    void printName() { System.out.println(name); }\n}\n\nclass Child extends Parent {\n    public String name = \"Child\";\n    void printName() { System.out.println(name); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Parent p = new Child();\n        System.out.println(p.name);\n        p.printName();\n    }\n}\n\\end{verbatim}","choices":{"0":"Parent\\nChild","1":"Child\\nChild","2":"Parent\\nParent","3":"Child\\nParent","4":"Compilation fails."},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1000,"topic":"Java Environment and Fundamentals","questionId":100008,"difficulty":"medium","type":"single","question":"You have a file named \\verb|Test.java|:\n\\begin{verbatim}\npublic class test {\n    public static void main(String[] args) {\n        System.out.println(\"Test\");\n    }\n}\n\\end{verbatim}\nWhat happens when you try to compile this file with \\verb|javac Test.java|?","choices":{"0":"It compiles successfully, creating \\verb|test.class|.","1":"It compiles successfully, creating \\verb|Test.class|.","2":"It fails to compile because the class name \\verb|test| does not match the filename \\verb|Test.java|.","3":"It fails to compile because of a syntax error in the main method."},"answers":["2"],"attempts":1,"attempted":true,"answered":false},{"topicId":1025,"topic":"ArrayList and Basic Collections","questionId":102515,"difficulty":"medium","type":"single","question":"What is the output?\\begin{verbatim}\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Test {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        System.out.println(list.remove(\"B\") + \" \" + list.size());\n    }\n}\n\\end{verbatim}","choices":{"0":"B 2","1":"true 2","2":"B 3","3":"true 3"},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1013,"topic":"String Immutability and Operations","questionId":101319,"difficulty":"medium","type":"multiple","question":"Given `String str = \"Java SE 8\";`, which expressions will evaluate to `true`? (Choose all that apply)","choices":{"0":"`str.startsWith(\"Java\")`","1":"`str.endsWith(\" 8\")`","2":"`str.contains(\"SE\")`","3":"`str.equalsIgnoreCase(\"java se 8\")`"},"answers":["0","1","2","3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1017,"topic":"Static Members and 'this' Keyword","questionId":101709,"difficulty":"medium","type":"single","question":"What is the result of compiling and running the following code?\\n\\begin{verbatim}\\npublic class StaticAccess {\\n    static String GREETING = \"Hello\";\\n\\n    public static void main(String[] args) {\\n        StaticAccess sa = null;\\n        System.out.println(sa.GREETING);\\n    }\\n}\\n\\end{verbatim}","choices":{"0":"Hello","1":"null","2":"A `NullPointerException` is thrown at runtime.","3":"The code fails to compile."},"answers":["0"],"attempts":1,"attempted":true,"answered":false},{"topicId":1003,"topic":"Java Coding Conventions and Javadoc","questionId":100311,"difficulty":"medium","type":"single","question":"Which Javadoc tag is used to indicate that a method or class is outdated and may be removed in a future version?","choices":{"0":"`@obsolete`","1":"`@deprecated`","2":"`@version`","3":"`@legacy`"},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1012,"topic":"Enums","questionId":101213,"difficulty":"medium","type":"single","question":"Which of the following code snippets will result in a compilation error?","choices":{"0":"\\begin{verbatim}public enum A { X, Y; public void m() {} }\\end{verbatim}","1":"\\begin{verbatim}public enum B implements java.io.Serializable { X, Y; }\\end{verbatim}","2":"\\begin{verbatim}public enum C { X, Y; private C() {} }\\end{verbatim}","3":"\\begin{verbatim}public enum D extends java.lang.Enum { X, Y; }\\end{verbatim}"},"answers":["3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1005,"topic":"Type Conversion and Casting","questionId":100518,"difficulty":"medium","type":"multiple","question":"Which of the following lines of code require an explicit cast to compile successfully? (Choose all that apply)","choices":{"0":"`long l = 10;`","1":"`byte b = 10;`","2":"`float f = 10.0;`","3":"`int i = 10L;`"},"answers":["2","3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1027,"topic":"Sorting and Searching Collections (Comparable, Comparator)","questionId":102715,"difficulty":"medium","type":"multiple","question":"Which `Comparator` static methods can be used to create a `Comparator` instance?","choices":{"0":"`Comparator.comparing(Function)`","1":"`Comparator.naturalOrder()`","2":"`Comparator.reversed()`","3":"`Comparator.thenComparing(Comparator)`"},"answers":["0","1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1007,"topic":"Variable Scope and Lifetime","questionId":100706,"difficulty":"medium","type":"single","question":"What is the result of compiling and running this class?\\n\\begin{verbatim}\npublic class ScopeTest {\n    private int x = 10;\n\n    public void process() {\n        int x = 20;\n        System.out.println(x);\n    }\n\n    public static void main(String[] args) {\n        new ScopeTest().process();\n    }\n}\n\\end{verbatim}","choices":{"0":"10","1":"20","2":"Compilation fails due to a duplicate variable 'x'.","3":"A runtime exception is thrown."},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1022,"topic":"Abstract Classes and Interfaces","questionId":102217,"difficulty":"medium","type":"multiple","question":"Which statements are true about `default` methods in Java 8 interfaces? (Choose all that apply)","choices":{"0":"They must be marked with the `default` keyword.","1":"They are implicitly `public`.","2":"A class can implement two interfaces with the same default method signature without providing its own implementation.","3":"They cannot be `static` or `final`."},"answers":["0","1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1014,"topic":"StringBuilder and StringBuffer","questionId":101419,"difficulty":"medium","type":"multiple","question":"Which statements are true? (Choose all that apply)","choices":{"0":"`String` objects are immutable.","1":"`StringBuilder` objects are mutable.","2":"`StringBuffer` is thread-safe.","3":"Concatenating `String` objects in a loop is generally less efficient than using `StringBuilder`."},"answers":["0","1","2","3"],"attempts":1,"attempted":true,"answered":false},{"topicId":1029,"topic":"Try-Catch-Finally Blocks","questionId":102914,"difficulty":"medium","type":"single","question":"What is the output of the following code?\n\\begin{verbatim}\npublic class Test {\n    public static void main(String[] args) {\n        String s = \"\";\n        try {\n            s += \"t\";\n            throw new Exception();\n        } catch (Exception e) {\n            s += \"c\";\n        } finally {\n            s += \"f\";\n        }\n        s += \"a\";\n        System.out.println(s);\n    }\n}\n\\end{verbatim}","choices":{"0":"`tfa`","1":"`tcfa`","2":"`tca`","3":"`tcf`"},"answers":["1"],"attempts":1,"attempted":true,"answered":false},{"topicId":1028,"topic":"Exception Hierarchy and Types","questionId":102819,"difficulty":"medium","type":"single","question":"What is the result of attempting to compile and run this class?\n\\begin{verbatim}\npublic class Test {\n    public void go() throws java.sql.SQLException {\n        System.out.println(\"Going\");\n    }\n    public static void main(String[] args) {\n        Test t = new Test();\n        t.go();\n    }\n}\n\\end{verbatim}","choices":{"0":"Compilation fails because `main` must declare `throws java.sql.SQLException`.","1":"Compilation fails for a different reason.","2":"It compiles and prints `Going`.","3":"It compiles but throws `java.sql.SQLException` at runtime."},"answers":["0"],"attempts":1,"attempted":true,"answered":false}],"difficulty":"medium"}]