Role/Persona:
You are a professional Java 8 instructor with extensive experience in teaching and using Java 8 (1.8).
You not only focus on the theoretical side of Java 8 but also the practical and tricky side of it.

Context/Situation:
You are tasked to guide, teach, and mentor fresh graduate students Java 8, in preperation for their certification exam.
Your students came from different degree programs like mathematics, computer science, and engineering. All of them have a background in programming.
They are going to take the Oracle 1Z0-808 Java SE8 exam in less than a month.

You also have a co-faculty that has recently passed the 1Z0-808 Java SE8 exam and is also teaching other students to take it, and this is his personal assessment of the exam:
"The 1Z0-808 exam was definitely challenging. A lot of the questions are deliberately tricky, and more than once I found myself thinking, ‘Who would actually write code like this?’ But even if the code seems odd, it’s usually valid — and that’s exactly the point.
This exam doesn’t just test whether you can program — it tests how deeply you understand how Java works under the hood. If your foundation isn’t strong or you’re not confident with the basics, it’s easy to get tripped up. You need more than just surface-level knowledge.
Attention to detail is critical. You really have to train yourself to think like the Java compiler: carefully analyzing each line and mentally executing the code, all while applying the right rules and understanding how the language fits together.
It’s not impossible, but it does demand focus, patience, and a sharp eye. Passing it takes more than study — it takes precision."

Task/Goal:
You want to make a comprehensive mock exam, answer/solution sheets and reviewers to mimic the 1Z0-808 Java SE8 exam.
Along with that, you also want to teach them all the basics about OOP (the four pillars), and other Java Nuances and programming concepts.
So your next task is to create a solution sheet explaining why the choices are wrong or right. Balance between brevity and details so that the students can grasp why it's wrong/right.
Your goal is to make a list of topics based on the context and situation you have. You can also add more details/nuances as you see fit.
There are 2 types of questions, one with a single correct choice and one with multiple correct choices.

Questions:
{
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103300,
        "difficulty": "easy",
        "type": "single",
        "question": "What is the output of the following code snippet? This question tests your understanding of the immutability of `java.time` objects.\n\\begin{verbatim}\nimport java.time.LocalDate;\n\npublic class DateTest {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.of(2025, 8, 2);\n        date.plusDays(10);\n        System.out.println(date);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`2025-08-02`",
            "1": "`2025-08-12`",
            "2": "The code fails to compile.",
            "3": "A `DateTimeException` is thrown at runtime."
        },
        "answers": [0]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103301,
        "difficulty": "easy",
        "type": "single",
        "question": "Which code snippet correctly creates a `LocalTime` object representing 1:30 PM (13:30)?\n\\begin{verbatim}\n// Assume imports are correct\n\\end{verbatim}",
        "choices": {
            "0": "`LocalTime time = new LocalTime(13, 30);`",
            "1": "`LocalTime time = LocalTime.of(1, 30, \"PM\");`",
            "2": "`LocalTime time = LocalTime.of(13, 30);`",
            "3": "`LocalTime time = LocalTime.parse(\"1:30 PM\");`"
        },
        "answers": [2]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103302,
        "difficulty": "easy",
        "type": "single",
        "question": "What is the output of the following code snippet? Pay attention to how the `java.time` API handles month-end adjustments.\n\\begin{verbatim}\nimport java.time.LocalDateTime;\n\npublic class DateTimeTest {\n    public static void main(String[] args) {\n        LocalDateTime dt = LocalDateTime.of(2025, 1, 31, 10, 0);\n        dt = dt.plusMonths(1);\n        System.out.println(dt);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`2025-02-28T10:00`",
            "1": "`2025-03-03T10:00`",
            "2": "`2025-03-02T10:00`",
            "3": "A `DateTimeException` is thrown at runtime."
        },
        "answers": [0]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103303,
        "difficulty": "easy",
        "type": "single",
        "question": "What is the output of the following code? This question highlights a common pitfall with static factory methods.\n\\begin{verbatim}\nimport java.time.Period;\n\npublic class PeriodTest {\n    public static void main(String[] args) {\n        Period p = Period.ofYears(2).ofMonths(3);\n        System.out.println(p);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`P2Y3M`",
            "1": "`P3M`",
            "2": "`P2Y`",
            "3": "The code fails to compile."
        },
        "answers": [1]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103304,
        "difficulty": "easy",
        "type": "single",
        "question": "Which code snippet correctly calculates the duration between two `LocalTime` objects?\n\\begin{verbatim}\nimport java.time.Duration;\nimport java.time.LocalTime;\n// ...\nLocalTime t1 = LocalTime.of(9, 0);\nLocalTime t2 = LocalTime.of(10, 30);\n// INSERT CODE HERE\n\\end{verbatim}",
        "choices": {
            "0": "`Duration d = Duration.between(t1, t2);`",
            "1": "`Period p = Period.between(t1, t2);`",
            "2": "`Duration d = t2.minus(t1);`",
            "3": "The code does not compile."
        },
        "answers": [0]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103305,
        "difficulty": "easy",
        "type": "multiple",
        "question": "Which of the following classes are part of the `java.time` package and represent date and/or time information without a time zone? (Choose all that apply)",
        "choices": {
            "0": "`LocalDate`",
            "1": "`LocalTime`",
            "2": "`LocalDateTime`",
            "3": "`ZonedDateTime`",
            "4": "`java.util.Date`",
            "5": "`Instant`"
        },
        "answers": [0, 1, 2]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103320,
        "difficulty": "medium",
        "type": "single",
        "question": "What is the output of the following code snippet? This is a classic test of immutability.\n\\begin{verbatim}\nimport java.time.LocalDate;\nimport java.time.Period;\n\npublic class DateTest {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.of(2025, 5, 10);\n        Period p = Period.ofDays(5);\n        date.plus(p);\n        System.out.println(date);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`2025-05-15`",
            "1": "`2025-05-10`",
            "2": "`2025-05-05`",
            "3": "The code fails to compile."
        },
        "answers": [1]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103321,
        "difficulty": "medium",
        "type": "single",
        "question": "What is the result of executing the following code? This question tests knowledge of predefined formatters.\n\\begin{verbatim}\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\npublic class FormatTest {\n    public static void main(String[] args) {\n        LocalDateTime dt = LocalDateTime.of(2025, 8, 2, 14, 30);\n        String formatted = dt.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);\n        System.out.println(formatted);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`2025-08-02 14:30`",
            "1": "`2025-08-02T14:30`",
            "2": "`2025-08-02T14:30:00`",
            "3": "A `DateTimeFormatException` is thrown."
        },
        "answers": [2]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103322,
        "difficulty": "medium",
        "type": "single",
        "question": "What is the output of the following code? This question assesses your knowledge of default parsing formats.\n\\begin{verbatim}\nimport java.time.LocalDate;\n\npublic class ParseTest {\n    public static void main(String[] args) {\n        String dateStr = \"2025-08-02\";\n        LocalDate d1 = LocalDate.parse(dateStr);\n        LocalDate d2 = LocalDate.of(2025, 8, 2);\n        System.out.println(d1.equals(d2));\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`true`",
            "1": "`false`",
            "2": "The code fails to compile.",
            "3": "A runtime exception is thrown."
        },
        "answers": [0]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103323,
        "difficulty": "medium",
        "type": "single",
        "question": "What is the result of executing the following code snippet? This question tests the applicability of `Period` vs. `Duration`.\n\\begin{verbatim}\nimport java.time.LocalTime;\nimport java.time.Period;\n\npublic class TimePeriodTest {\n    public static void main(String[] args) {\n        LocalTime time = LocalTime.of(10, 0);\n        Period period = Period.ofDays(1);\n        System.out.println(time.plus(period));\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "It prints `10:00`.",
            "1": "The code fails to compile.",
            "2": "An `UnsupportedTemporalTypeException` is thrown at runtime.",
            "3": "It prints the time for the next day, `10:00`."
        },
        "answers": [2]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103324,
        "difficulty": "medium",
        "type": "single",
        "question": "What is the result of executing the following code? Pay close attention to the year.\n\\begin{verbatim}\nimport java.time.LocalDate;\n\n// ...\nLocalDate.of(2025, 2, 29);\n\\end{verbatim}",
        "choices": {
            "0": "It creates a `LocalDate` for `2025-02-28`.",
            "1": "It creates a `LocalDate` for `2025-03-01`.",
            "2": "The code fails to compile.",
            "3": "It throws a `DateTimeException` at runtime."
        },
        "answers": [3]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103325,
        "difficulty": "medium",
        "type": "single",
        "question": "What is the output of this code snippet, which combines a `LocalDate` and `LocalTime`?\n\\begin{verbatim}\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.time.LocalDateTime;\n\npublic class CombineTest {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.of(2025, 11, 20);\n        LocalTime time = LocalTime.of(18, 0);\n        LocalDateTime dt = time.atDate(date);\n        System.out.println(dt);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`2025-11-20T18:00`",
            "1": "`18:00T2025-11-20`",
            "2": "The code does not compile.",
            "3": "A `ClassCastException` is thrown at runtime."
        },
        "answers": [0]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103326,
        "difficulty": "medium",
        "type": "single",
        "question": "What is the output of the following code using the `truncatedTo` method?\n\\begin{verbatim}\nimport java.time.LocalDateTime;\nimport java.time.temporal.ChronoUnit;\n\npublic class TruncateTest {\n    public static void main(String[] args) {\n        LocalDateTime dt = LocalDateTime.of(2025, 8, 2, 13, 55, 45);\n        dt = dt.truncatedTo(ChronoUnit.HOURS);\n        System.out.println(dt);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`2025-08-02T13:00`",
            "1": "`2025-08-02T14:00`",
            "2": "`2025-08-02T13:55:45`",
            "3": "A `DateTimeException` is thrown."
        },
        "answers": [0]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103327,
        "difficulty": "medium",
        "type": "single",
        "question": "What is the output of this code, which calculates the period between two dates?\n\\begin{verbatim}\nimport java.time.LocalDate;\nimport java.time.Period;\n\npublic class PeriodBetweenTest {\n    public static void main(String[] args) {\n        LocalDate d1 = LocalDate.of(2025, 1, 15);\n        LocalDate d2 = LocalDate.of(2026, 2, 20);\n        Period period = Period.between(d1, d2);\n        System.out.println(period);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`P1Y1M5D`",
            "1": "`P1Y1M6D`",
            "2": "`P13M5D`",
            "3": "`P401D`"
        },
        "answers": [0]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103328,
        "difficulty": "medium",
        "type": "single",
        "question": "What is the result of executing the following code? This tests formatting with a custom pattern.\n\\begin{verbatim}\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\npublic class FormatCustomTest {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.of(2025, 8, 2);\n        DateTimeFormatter f = DateTimeFormatter.ofPattern(\"MMM dd, yyyy\");\n        System.out.println(date.format(f));\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`August 02, 2025`",
            "1": "`Aug 2, 2025`",
            "2": "`Aug 02, 2025`",
            "3": "The code throws a runtime exception."
        },
        "answers": [2]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103329,
        "difficulty": "medium",
        "type": "single",
        "question": "What is the output of the following code involving `Duration` and nanoseconds?\n\\begin{verbatim}\nimport java.time.Duration;\nimport java.time.LocalDateTime;\n\npublic class DurationTest {\n    public static void main(String[] args) {\n        LocalDateTime dt1 = LocalDateTime.of(2025, 8, 2, 10, 0, 0);\n        LocalDateTime dt2 = LocalDateTime.of(2025, 8, 2, 10, 0, 30, 500000000);\n        Duration duration = Duration.between(dt1, dt2);\n        System.out.println(duration);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`PT30S`",
            "1": "`PT31S`",
            "2": "`PT30.5S`",
            "3": "`P30.5S`"
        },
        "answers": [2]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103330,
        "difficulty": "medium",
        "type": "single",
        "question": "What is the output of this code snippet? Carefully trace the chained operations.\n\\begin{verbatim}\nimport java.time.LocalDate;\n\npublic class ChainTest {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.of(2025, 1, 1).plusYears(1).minusMonths(1).plusDays(1);\n        System.out.println(date);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`2026-01-01`",
            "1": "`2025-12-02`",
            "2": "`2026-02-02`",
            "3": "`2025-12-31`"
        },
        "answers": [1]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103331,
        "difficulty": "medium",
        "type": "multiple",
        "question": "Which of the following code snippets correctly create a `Period` object representing exactly 1 week (7 days)? (Choose all that apply)",
        "choices": {
            "0": "`Period.ofWeeks(1);`",
            "1": "`Period.ofDays(7);`",
            "2": "`Period.parse(\"P1W\");`",
            "3": "`Period.parse(\"P7D\");`",
            "4": "`new Period(0, 0, 7);`"
        },
        "answers": [0, 1, 2, 3]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103332,
        "difficulty": "medium",
        "type": "multiple",
        "question": "Which of the following lines of code will throw a `DateTimeParseException` at runtime? (Choose all that apply)\n\\begin{verbatim}\n// Assume imports are correct\n\\end{verbatim}",
        "choices": {
            "0": "`LocalDate.parse(\"2025/08/02\");`",
            "1": "`LocalTime.parse(\"14:30:00\");`",
            "2": "`LocalDate.parse(\"Jan 01, 2025\");`",
            "3": "`LocalDateTime.parse(\"2025-08-02T10:00\");`"
        },
        "answers": [0, 2]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103333,
        "difficulty": "medium",
        "type": "multiple",
        "question": "Which of the following `java.time` related classes are immutable? (Choose all that apply)",
        "choices": {
            "0": "`LocalDate`",
            "1": "`Period`",
            "2": "`LocalDateTime`",
            "3": "`DateTimeFormatter`",
            "4": "`java.time.format.DateTimeFormatterBuilder`"
        },
        "answers": [0, 1, 2, 3]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103334,
        "difficulty": "medium",
        "type": "multiple",
        "question": "Which of the following are valid ways to create a `Duration` of exactly 1 hour? (Choose all that apply)",
        "choices": {
            "0": "`Duration.ofHours(1);`",
            "1": "`Duration.of(1, ChronoUnit.HOURS);`",
            "2": "`Duration.ofMinutes(60);`",
            "3": "`Duration.parse(\"PT1H\");`",
            "4": "`Duration.of(3600, ChronoUnit.SECONDS);`"
        },
        "answers": [0, 1, 2, 3, 4]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103350,
        "difficulty": "hard",
        "type": "single",
        "question": "What is the output of the following code? This question tests your understanding of date arithmetic across a leap day.\n\\begin{verbatim}\nimport java.time.LocalDate;\n\npublic class LeapTest {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.of(2024, 2, 29);\n        LocalDate date2 = date.plusYears(1).plusDays(1);\n        System.out.println(date2);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`2025-02-28`",
            "1": "`2025-03-01`",
            "2": "A `DateTimeException` is thrown when creating `date`.",
            "3": "A `DateTimeException` is thrown when `plusYears(1)` is called."
        },
        "answers": [1]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103351,
        "difficulty": "hard",
        "type": "single",
        "question": "What is the result of attempting to compile and run the following code? This question checks your knowledge of object instantiation rules for the Date-Time API.\n\\begin{verbatim}\nimport java.time.LocalDate;\n\npublic class ConstructorTest {\n    public static void main(String[] args) {\n        LocalDate date = new LocalDate(2025, 8, 2);\n        System.out.println(date);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "It prints `2025-08-02`.",
            "1": "It throws a `DateTimeException` at runtime.",
            "2": "It fails to compile.",
            "3": "It prints a reference to the object."
        },
        "answers": [2]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103352,
        "difficulty": "hard",
        "type": "single",
        "question": "What is the output of this code snippet involving adding a month to the end of January?\n\\begin{verbatim}\nimport java.time.LocalDate;\nimport java.time.Period;\n\npublic class AdjustTest {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.of(2025, 1, 31);\n        date = date.plus(Period.ofMonths(1));\n        System.out.println(date);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`2025-02-28`",
            "1": "`2025-03-03`",
            "2": "`2025-03-02`",
            "3": "A `DateTimeException` is thrown."
        },
        "answers": [0]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103353,
        "difficulty": "hard",
        "type": "single",
        "question": "What is the result of the following code? This question combines custom parsing with standard formatting.\n\\begin{verbatim}\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\npublic class MixFormatParseTest {\n    public static void main(String[] args) {\n        DateTimeFormatter f = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss\");\n        LocalDateTime dt = LocalDateTime.parse(\"2025-08-02T14:30:00\", f);\n        System.out.println(dt.format(DateTimeFormatter.ISO_DATE));\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`2025-08-02T14:30:00`",
            "1": "`2025-08-02`",
            "2": "A `DateTimeParseException` is thrown.",
            "3": "The code does not compile."
        },
        "answers": [1]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103354,
        "difficulty": "hard",
        "type": "single",
        "question": "What is the output of the following code? This tests how `Duration.between` handles times that cross midnight.\n\\begin{verbatim}\nimport java.time.Duration;\nimport java.time.LocalTime;\n\npublic class MidnightTest {\n    public static void main(String[] args) {\n        LocalTime t1 = LocalTime.of(22, 0); // 10 PM\n        LocalTime t2 = LocalTime.of(2, 0);  // 2 AM\n        Duration d = Duration.between(t1, t2);\n        System.out.println(d);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`PT4H`",
            "1": "`PT-20H`",
            "2": "`PT20H`",
            "3": "An `UnsupportedTemporalTypeException` is thrown."
        },
        "answers": [1]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103355,
        "difficulty": "hard",
        "type": "single",
        "question": "What is the output of the following code snippet regarding `Period` normalization?\n\\begin{verbatim}\nimport java.time.Period;\n\npublic class NormalizeTest {\n    public static void main(String[] args) {\n        Period p = Period.of(0, 13, 35);\n        p = p.normalized();\n        System.out.println(p);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`P1Y2M4D`",
            "1": "`P1Y1M35D`",
            "2": "`P1Y2M5D`",
            "3": "`P13M35D`"
        },
        "answers": [1]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103356,
        "difficulty": "hard",
        "type": "single",
        "question": "What is the result of executing the following code? This question tests the case-sensitivity and symbol correctness of formatter patterns.\n\\begin{verbatim}\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\npublic class PatternCaseTest {\n    public static void main(String[] args) {\n        String dateStr = \"2-8-2025\";\n        DateTimeFormatter f = DateTimeFormatter.ofPattern(\"d-m-yyyy\");\n        LocalDate date = LocalDate.parse(dateStr, f);\n        System.out.println(date);\n    }\n}\n\\end{verbatim}",
        "choices": {
            "0": "`2025-08-02`",
            "1": "`2025-02-08`",
            "2": "The code does not compile.",
            "3": "A `DateTimeParseException` is thrown."
        },
        "answers": [3]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103357,
        "difficulty": "hard",
        "type": "multiple",
        "question": "Which of the following lines of code, if executed independently, will result in a runtime exception? (Choose all that apply)\n\\begin{verbatim}\n// Assume all necessary imports from java.time and java.time.temporal\n\\end{verbatim}",
        "choices": {
            "0": "`LocalDate.of(2025, 13, 1);`",
            "1": "`Duration.between(LocalDate.now(), LocalDateTime.now());`",
            "2": "`Period.of(1, 1, 1).plus(Duration.ofHours(1));`",
            "3": "`LocalTime.now().truncatedTo(ChronoUnit.DAYS);`",
            "4": "`Period.ofMonths(12).normalized();`"
        },
        "answers": [0, 1, 2, 3]
    },
    {
        "topicId": 1033,
        "topic": "Date and Time API (java.time)",
        "questionId": 103358,
        "difficulty": "hard",
        "type": "multiple",
        "question": "Given the string `String text = \"2025-AUG-02 10:30\";`, which of the following formatters will successfully parse this string into a `LocalDateTime`? (Choose all that apply)\n\\begin{verbatim}\n// Assume imports are correct and a suitable default Locale (e.g., US)\n\\end{verbatim}",
        "choices": {
            "0": "`DateTimeFormatter.ofPattern(\"yyyy-MMM-dd HH:mm\");`",
            "1": "`DateTimeFormatter.ofPattern(\"yyyy-MMMM-dd HH:mm\");`",
            "2": "`DateTimeFormatter.ofPattern(\"yyyy-MMM-dd hh:mm a\");`",
            "3": "`DateTimeFormatter.ofPattern(\"uuuu-LLL-dd HH:mm\");`",
            "4": "`DateTimeFormatter.ofPattern(\"yyyy-MMM-dd HH:mm\").withLocale(java.util.Locale.FRENCH);`"
        },
        "answers": [0, 3]
    }
Output/Format:
Your output will be a list of JSON objects that represents questions, choices, answers, and some metadata. For example:
[
    {
        "topicId": <integer starting at 1000>
        "topic": "<topic>",
        "solutionId": <same as the questionId>,
        "explanation": { (explanations are in latex readable/compileable format. that is, when  this string is pasted in a latex document, it will work. use verbatim (assume that it is already imported), if it has underscores, also enclose it in verbatim)
            "0" : "WRONG - <explanation why it's wrong>",
            "1" : "RIGHT - <explanation why it's wrong>",
            "2" : "WRONG - <explanation why it's wrong>",
            ... 
        } 
    },
    ...
]

Example:
{
    "topicId": 1000,
    "topic": "Java Environment and Fundamentals",
    "solutionId": 100002,
    "explanation": {
        "0": "CORRECT - This signature meets all the requirements for a Java application's entry point. It must be \\verb|public|, \\verb|static|, have a \\verb|void| return type, be named \\verb|main|, and accept a \\verb|String| array. The syntax \\verb|String args[]| is a valid alternative to \\verb|String[] args| for declaring an array and is accepted by the JVM.",
        "1": "WRONG - The \\verb|main| method must have a \\verb|void| return type. It cannot return a value. If the return type is \\verb|int| (or anything else), the JVM will not recognize it as the entry point, and your program will fail to run, typically with an error stating the \\verb|main| method is not found.",
        "2": "WRONG - The \\verb|main| method must be declared \\verb|static|. This allows the JVM to call the method directly on the class without needing to create an object instance first. Removing \\verb|static| makes it an instance method, which cannot serve as the application entry point.",
        "3": "WRONG - The \\verb|main| method must accept a single parameter of type \\verb|String[]| (an array of strings). This parameter is used to pass command-line arguments to the application. A \\verb|main| method with no parameters is just a regular method and will not be identified by the JVM as the starting point. Note that the order of modifiers, \\verb|static public|, is perfectly valid, but the missing parameter is the fatal flaw."
    }
}